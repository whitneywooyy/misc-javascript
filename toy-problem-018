// Rebuild the .bind method in Javascript called vind.
// func.bind(thing) and func.vind(thing) should do the same thing.

// To get started, please consider the following:

// Function.prototype.vind = function(context){};

// Hint: You can use call or apply still.
// Before you worry about currying, just focus on reassigning context.
// As a reminder, .bind returns a new function with an assigned context/'this' keyword.

Function.prototype.vind = function(context){
    var that = this;
    return function(){
        that.apply(context);    
    }
}

var thiser = function(){console.log(this)};
thiser.vind(6)();
// same as thiser.bind(6)();

// ----------------------------------------------
// Adding in arguments

Function.prototype.vind = function(context){
    var that = this;
    var arr = Array.prototype.slice.call(arguments, 1);
    return function(){
        that.apply(context, arr);    
    }
}

var thiser = function(){console.log(this)};
thiser.vind(6)();
// same as thiser.bind(6)();
// Major concepts in this example: context, prototypes, and currying

// SEE IT IN ACTION: http://jsfiddle.net/whitneywooyy/pL8rgtcL/
